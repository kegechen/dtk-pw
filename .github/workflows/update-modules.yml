name: update-modules
on:
  workflow_call:
    secrets:
      APP_ID:
        description: 'GitHub App ID'
        required: true
      APP_PRIVATE_KEY:
        description: 'GitHub App private key'
        required: true

jobs:
  sync-repos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2

      - name: Install dependencies for yaml parser
        run: |
          npm install js-yaml

      - name: Get github token
        id: get_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Sync repo modules
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get_token.outputs.token }}
          script: |
            const yaml = require('js-yaml');
            // get pull request info
            const {data: prInfo} = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const getContent = async (sha) => {
              const {data: meta} = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'meta.yml',
                ref: sha
              });
              return Buffer.from(meta.content, meta.encoding).toString('utf8');
            };
            // get specific file from commit
            const baseContent = await getContent(prInfo.base.sha);
            const headContent = await getContent(prInfo.head.sha);
            const baseMetaInfo = yaml.load(baseContent);
            const headMetaInfo = yaml.load(headContent);
            baseRepos = baseMetaInfo['repos'];
            console.log(baseRepos);
            headRepos = headMetaInfo['repos'];
            console.log(headRepos);
            headTrackBranch = headMetaInfo.branch;
            console.log(headTrackBranch);
            let newRepos = [];
            let deletedRepos = baseRepos;
            console.log(deletedRepos);
            for (let repo of headRepos) {
              if (baseRepos.includes(repo)) {
              // repo exists in both base and head, remove it from deletedRepos
                deletedRepos.splice(deletedRepos.indexOf(repo), 1);
              } else {
                newRepos.push(repo);
              }
            }
            console.log(deletedRepos);
            console.log(newRepos);
            // deleted repo's information and added repo's information can be posted together
            // create new submodule config
            submoduleConfig = {
              path: '.gitmodules',
              mode: '100644',
              type: 'blob'
            };
            submoduleContent = '';
            const addSubmodule = async (repo, branch) => {
              const {data: repoInfo} = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: repo
              });
              submoduleContent += '[submodule "' + repo + '"]\n';
              submoduleContent += '\tpath = ' + repo + '\n';
              submoduleContent += '\turl = ' + repoInfo.clone_url + '\n';
              submoduleContent += '\tbranch = ' + branch + '\n';
            };

            // everytime rebuild a new submodule config from meta.yml
            // just build a .gitmodules from head repo
            for (let repo of headRepos) {
              await addSubmodule(repo, headTrackBranch);
            }
            console.log(submoduleContent);
            submoduleConfig.content = submoduleContent;
            tree = [submoduleConfig];
            for (let repo of deletedRepos) {
              deletedRepoInfo = {
                path: repo,
                mode: '160000',
                type: 'commit'
              };
              tree += deletedRepoInfo;
            }
            for (let repo of newRepos) {
              addedRepoInfo = {
                path: repo,
                mode: '160000',
                type: 'commit'
              };
              // get commit sha for repo branch
              const {data: commitInfo} = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: repo,
                branch: headTrackBranch
              });
              addedRepoInfo.sha = commitInfo.commit.sha;
              tree += addedRepoInfo;
            }
            console.log(tree);
            // create a new tree
            const {data: newTree} = await github.rest.git.createTree({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tree: tree,
              base_tree: prInfo.base.sha
            });
            console.log(newTree);
            // create a new commit using tree
            const {data: newCommit} = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: 'chore: sync repo modules',
              tree: newTree.sha,
              parents: [prInfo.base.sha]
            });
            console.log(newCommit);
            // update reference
            result = await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/' + prInfo.head.ref,
              sha: newCommit.sha
            });
            console.log(result);
