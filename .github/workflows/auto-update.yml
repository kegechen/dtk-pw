name: auto-update
on:
  pull_request:
    paths:
      - debian/changelog
  workflow_call:
    secrets:
      APP_ID:
        description: 'GitHub App ID'
        required: true
      APP_PRIVATE_KEY:
        description: 'GitHub App private key'
        required: true

jobs:
  read-meta:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check_version.outputs.version }}
      update: ${{ steps.check_version.outputs.update }}
      repos: ${{ steps.list_repos.outputs.repos }}
      updateBranch: ${{ steps.list_repos.outputs.updateBranch }}
    steps:
      # Checkout the pull request
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install dependencies for helper
        run: |
          npm install parse-git-config
      - name: Get diff and check version update
        id: check_version
        uses: actions/github-script@v6
        with:
          script: |
            const helper = require('./scripts/helper.js');
            const {data: pr} = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            helper.logWithHint('pr info:', pr);
            const {data: diff} = await github.request(pr.diff_url);
            helper.logWithHint('diff:', diff);
            const versionPattern = /\+dtk \(\s*(\d+(\.\d+)*)\)/;
            const result = versionPattern.exec(diff);
            helper.logWithHint('result:', result);
            let update, version;
            if (result == null) {
              update = false;
              version = null;
            } else {
              update = true;
              version = result[1];
            }
            console.log("update: ", update);
            console.log("version: ", version);
            core.setOutput("version", version);
            core.setOutput("update", update);
      - name: Get github token
        if: steps.check_version.outputs.update == 'true'
        id: get_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: List repos tracked
        if: steps.check_version.outputs.update == 'true'
        id: list_repos
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get_token.outputs.token }}
          script: |
            const helper = require('./scripts/helper.js');
            const updateBranch = context.payload.pull_request.base.ref;
            let repos = [];
            let submodules = helper.getSubmodules();
            const repoNum = submodules.length;
            if (!repoNum) {
              core.setFailed("No submodules found!");
            } else {
              for (let submodule of submodules) {
                let repo = submodule.name;
                if (submodule.branch != updateBranch) {
                  core.setFailed("All submodules must track the same branch as dtk!");
                }
                repos.push(repo);
              }
            }
            core.setOutput("repos", repos);
            core.setOutput("updateBranch", updateBranch);

  deliver-pr:
    needs: read-meta
    runs-on: ubuntu-latest
    if: needs.read-meta.outputs.update == 'true'
    strategy:
      matrix:
        repo: ${{ fromJson(needs.read-meta.outputs.repos) }}
    steps:
        - uses: actions/checkout@v3
          with:
            repository: deepin-community/deepin-gbp-dch-plugins
        - name: Build and install dch tool
          run: |
            sudo apt install -y devscripts
            sudo apt build-dep -y .
            dpkg-buildpackage -b -us -uc -ui
            cd ..
            sudo apt install -y ./deepin-gbp-dch-plugins*.deb
        - uses: actions/checkout@v3
          with:
            repository: ${{ github.repository_owner }}/${{ matrix.repo }}
            ref: ${{ needs.read-meta.outputs.updateBranch }}
            fetch-depth: 0
        - name: Get github token
          id: get_token
          uses: tibdex/github-app-token@v1
          with:
            app_id: ${{ secrets.APP_ID }}
            private_key: ${{ secrets.APP_PRIVATE_KEY }}
        - name: Get email
          id: get_email
          uses: evvanErb/get-github-email-by-username-action@v2.0
          with:
            github-username: ${{ github.event.pull_request.user.login }}
            token: ${{ steps.get_token.outputs.token }}
        - name: Generate changelog using gbp
          id: generate_changelog
          run: |
            set -x
            git config user.name "${{ github.event.pull_request.user.login }}"
            git config user.email "${{ steps.get_email.outputs.email }}"
            gbp deepin-changelog --spawn-editor=never --distribution=unstable --force-distribution --git-author --ignore-branch -N ${{ needs.read-meta.outputs.version }}
            echo "changelog=$(cat debian/changelog | base64 -w 0)" >> $GITHUB_OUTPUT
        - name: Update contents and create pull requests
          id: create_pr
          uses: actions/github-script@v6
          with:
            github-token: ${{ steps.get_token.outputs.token }}
            result-encoding: string
            script: |
              const updateBranch = '${{ needs.read-meta.outputs.updateBranch }}';
              const topicBranch = 'topic-update';
              const repo = '${{ matrix.repo }}';
              const version = '${{ needs.read-meta.outputs.version}}';
              const { data: changelogBlob } = await github.rest.git.createBlob({
                owner: context.repo.owner,
                repo: repo,
                content: '${{ steps.generate_changelog.outputs.changelog }}',
                encoding: 'base64'
              });
              console.log(changelogBlob);
              const changelog = {
                path: 'debian/changelog',
                mode: '100644',
                type: 'blob',
                sha: changelogBlob.sha
              }
              const identity = {
                name: '${{ github.event.pull_request.user.login }}',
                email: '${{ steps.get_email.outputs.email }}'
              };
              const {data: base} = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: repo,
                branch: updateBranch
              });
              const baseSha = base.commit.sha;
              const {data: newTree} = await github.rest.git.createTree({
                owner: context.repo.owner,
                repo: repo,
                tree: [changelog],
                base_tree: baseSha
              });
              const {data: newCommit} = await github.rest.git.createCommit({
                owner: context.repo.owner,
                repo: repo,
                message: `chore: update changelog\n\nRelease ${version}.`,
                tree: newTree.sha,
                parents: [baseSha],
                committer: identity,
                author: identity
              });
              const {data: matchedRef} = await github.rest.git.listMatchingRefs({
                owner: context.repo.owner,
                repo: repo,
                ref: `heads/${topicBranch}`
              });
              console.log(matchedRef);
              let exist = false;
              for (let matched of matchedRef) {
                if (matched.ref == `refs/heads/${topicBranch}`) {
                  exist = true;
                  break;
                }
              }
              console.log("topic branch exist: ", exist);
              console.log("topic branch: " + topicBranch + ", branch to update: " + updateBranch);
              try {
                if (exist) {
                  await github.rest.git.updateRef({
                    owner: context.repo.owner,
                    repo: repo,
                    ref: `heads/${topicBranch}`,
                    sha: newCommit.sha,
                    force: true
                  });
                } else {
                  await github.rest.git.createRef({
                    owner: context.repo.owner,
                    repo: repo,
                    ref: `heads/${topicBranch}`,
                    sha: newCommit.sha
                  });
                }
              } catch (e) {
                console.log(e);
                core.setFailed(e.message);
              }
              // create pull request
              const {data: prs} = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: repo,
                head: `${context.repo.owner}:${topicBranch}`,
                base: `${updateBranch}`
              });
              console.log("prs exist: ", prs);
              let prInfo;
              if (prs.length == 0) {
                const { data: pr } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: repo,
                  title: 'chore: update changelog',
                  body: `Release ${version}.`,
                  head: topicBranch,
                  base: updateBranch
                });
                core.setOutput('prNumber', pr.number);
                return pr.html_url;
              } else {
                core.setOutput('prNumber', prs[0].number);
                return prs[0].html_url;
              }

        - name: Create PR status
          uses: actions/github-script@v6
          with:
            github-token: ${{ steps.get_token.outputs.token }}
            script: |
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'pending',
                context: 'auto-update / check-update (${{ matrix.repo }})',
                target_url: '${{ steps.create_pr.outputs.result }}',
                description: 'Waiting for checks to complete...'
              });
